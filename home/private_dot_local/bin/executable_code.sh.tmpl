#!/bin/bash

### Helper functions

path_remove() {
    # remove the argument from $PATH
    local -a path newpath

    saveIFS=$IFS
    IFS=:
    read -r -a path <<<"$PATH"

    newpath=()
    for p in "${path[@]}" ; do
        if [[ "$p" != "$1" ]] ; then
            newpath+=("$p")
        fi
    done

    PATH="${newpath[*]}"
    IFS=$saveIFS
}

read_cmdline() {
    # read the command line of $2 into the array variable $1
    local PROC="/proc"
    local -n var=$1
    [ -e "$PROC/$2/cmdline" ] || return 1

    while read -r -d '' arg ; do
        var+=("$arg")
    done < "$PROC/$2/cmdline"
    return 0
}


### Argument parsing

args=("$@")
arg_index=0
new_args=()

next_arg() {
    arg_index=$((arg_index + 1))
}

copy_arg() {
    new_args+=("${args[$arg_index]}")
    next_arg
}

copy_arg_with_parameter() {
    copy_arg
    if [ "$arg_index" -lt "${#args[@]}" ] ; then
        copy_arg
    fi
}

# Set to true if we want to override user_data_dir and extensions_dir 
# if not present on command line
{{- if eq .chezmoi.os "darwin" }}
add_user_data_dir=false
add_extensions_dir=true
{{- else }}
add_user_data_dir=true
add_extensions_dir=false
{{- end }}

# Because 'code' without any arguments opens the last workspace in the
# history, ignoring history, we add --new-window if there are no
# uris, no paths, and no --new-window/--reuse-window.
add_new_window=true

while [ "$arg_index" -lt "${#args[@]}" ] ; do
    arg="${args[$arg_index]}"
    case "$arg" in
        # Explicit paths passed by user
        --file-uri | \
        --folder-uri)
            add_new_window=false
            copy_arg_with_parameter
            ;;
        --file-uri=* | \
        --folder-uri=*)
            add_new_window=false
            copy_arg
            ;;
        # Other string arguments that expect another parameter - as of 2021-03-11
        --builtin-extensions-dir | \
        --category | \
        --crash-reporter-id | \
        --debugBrkPluginHost | \
        --debugBrkSearch | \
        --debugId | \
        --debugPluginHost | \
        --debugSearch | \
        --disable-extension | \
        --disableExtensions | \
        --driver | \
        --enable-proposed-api | \
        --export-default-configuration | \
        --extensionDevelopmentPath | \
        --extensionHomePath | \
        --extensionTestsPath | \
        --extensions-download-dir | \
        --force-device-scale-factor | \
        --inspect | \
        --inspect-brk | \
        --inspect-brk-extensions | \
        --inspect-brk-search | \
        --inspect-extensions | \
        --inspect-search | \
        --install-builtin-extension | \
        --install-extension | \
        --install-source | \
        --js-flags | \
        --locale | \
        --locate-extension | \
        --log | \
        --log-net-log | \
        --logsPath | \
        --max-memory | \
        --prof-append-timers | \
        --prof-startup-prefix | \
        --proxy-bypass-list | \
        --proxy-pac-url | \
        --proxy-server | \
        --remote | \
        --sync | \
        --trace-category-filter | \
        --trace-options | \
        --uninstall-extension | \
        --waitMarkerFilePath)
            copy_arg_with_parameter
            ;;
        --user-data-dir)
            add_user_data_dir=false
            copy_arg_with_parameter
            ;;
        --user-data-dir=*)
            add_user_data_dir=false
            copy_arg
            ;;
{{- if ne .chezmoi.os "linux" }}
        --extensions-dir)
            add_extensions_dir=false
            copy_arg_with_parameter
            ;;
        --extensions-dir=*)
            add_extensions_dir=false
	    copy_arg
	    ;;
{{- end }}
        --help | \
        --new-window | \
        --reuse_window)
            add_new_window=false
            copy_arg
            ;;
        # Other arguments
        -*)
            copy_arg
            ;;
        # absolute_paths
        /*)
            add_new_window=false
            copy_arg
            ;;
        # Special case relative path .
        .)
            add_new_window=false
            new_args+=("$PWD")
            next_arg
            ;;
        # Other relative paths
        *)
            add_new_window=false
            new_args+=("$PWD/$arg")
            next_arg
            ;;
    esac
done

# Check if code comes from flatpak or system wide
{{- if and .pkgs.flatpak (output "sh" "-c" "flatpak list | grep com.visualstudio.code") }}
  {{- $vscode_info := output "sh" "-c" "flatpak info -M com.visualstudio.code" }}
# Regenerate script if permissions changes: {{ $vscode_info | sha256sum }}
   {{- if regexMatch "sockets=.*wayland.*" $vscode_info }}
new_args+=("--ozone-platform=wayland")
   {{- end }}
{{- else }}
if $add_extensions_dir ; then
   new_args+=("--extensions-dir")
   new_args+=("${XDG_CACHE_HOME:-$HOME/.cache}/Code")
fi
{{- end }}
if $add_user_data_dir ; then
    new_args+=("--user-data-dir")
    new_args+=("${XDG_CONFIG_HOME:-$HOME/.config}/Code")
fi

if $add_new_window ; then
    new_args+=("--new-window")
fi

flatpak run --branch=stable --command=code --file-forwarding com.visualstudio.code "${new_args[@]}"

